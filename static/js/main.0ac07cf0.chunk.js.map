{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["URL","getTodos","a","fetch","response","json","getUsers","userId","Filter","TodoList","todos","selectedUser","selectedUserId","useState","query","setQuery","All","filterState","setFilterState","filteredTodos","filter","todo","isFiltered","title","toLowerCase","includes","Active","completed","Completed","className","type","value","onChange","event","target","map","classNames","TodoList__item","checked","readOnly","onClick","id","CurrentUser","onRemoveUser","user","setUser","getUser","useCallback","newUser","useEffect","name","username","email","App","setSelectedUserId","setTodos","removeUser","getTodosList","todosFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ac07cf0.chunk.js","sourcesContent":["const URL = 'https://mate.academy/students-api';\n\nexport async function getTodos() {\n  const response = await fetch(`${URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUsers(userId: number) {\n  const response = await fetch(`${URL}/users/${userId}`);\n\n  return response.json();\n}\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../react-app-env';\n\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[],\n  selectedUser: number | null,\n  selectedUserId: (userId: number) => void,\n};\n\nenum Filter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUser,\n  selectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [filterState, setFilterState] = useState(Filter.All);\n\n  const filteredTodos = todos.filter((todo) => {\n    const todoToLower = todo.title.toLowerCase();\n    const isFiltered = todoToLower.includes(query.toLowerCase());\n\n    switch (filterState) {\n      case Filter.All:\n        return isFiltered;\n\n      case Filter.Active:\n        return isFiltered && !todo.completed;\n\n      case Filter.Completed:\n        return isFiltered && todo.completed;\n\n      default:\n        return true;\n    }\n  });\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__filter\">\n        <label>\n          Search:\n          <input\n            className=\"TodoList__input\"\n            type=\"text\"\n            value={query}\n            onChange={(event) => {\n              setQuery(event.target.value);\n            }}\n          />\n        </label>\n\n        <label>\n          Show:\n          <select\n            className=\"TodoList__input\"\n            value={filterState}\n            onChange={(event) => {\n              setFilterState(event.target.value as Filter);\n            }}\n          >\n            <option value={Filter.All}>All</option>\n            <option value={Filter.Active}>Active</option>\n            <option value={Filter.Completed}>Completed</option>\n          </select>\n        </label>\n      </div>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {filteredTodos.map((todo) => (\n            <li\n              key={todo.id}\n              className={classNames({\n                TodoList__item: true,\n                'TodoList__item--checked': todo.completed,\n                'TodoList__item--unchecked': !todo.completed,\n              })}\n            >\n              <label>\n                <input\n                  checked={todo.completed}\n                  type=\"checkbox\"\n                  readOnly\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              {todo.userId && (\n                <button\n                  data-cy=\"userButton\"\n                  onClick={() => {\n                    selectedUserId(todo.userId);\n                  }}\n                  className={classNames({\n                    'TodoList__user-button button': true,\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUser,\n                  })}\n                  type=\"button\"\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { User } from '../../react-app-env';\nimport { getUsers } from '../../api/api';\n\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number,\n  onRemoveUser: () => void,\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, onRemoveUser }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  const getUser = useCallback(async () => {\n    const newUser = await getUsers(userId);\n\n    setUser(newUser);\n  }, [userId]);\n\n  useEffect(() => {\n    getUser();\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Current user: ${user?.id}`}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.username}</p>\n      <p className=\"CurrentUser__phone\">{user?.email}</p>\n      {user && (\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"button\"\n          onClick={onRemoveUser}\n        >\n          Remove\n        </button>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { getTodos } from './api/api';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './react-app-env';\n\nimport './App.scss';\nimport './styles/general.scss';\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState<number | null>(null);\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const removeUser = useCallback(() => {\n    setSelectedUserId(null);\n  }, []);\n\n  const getTodosList = useCallback(async () => {\n    const todosFromServer = await getTodos();\n\n    setTodos(todosFromServer);\n  }, []);\n\n  useEffect(() => {\n    getTodosList();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          selectedUser={selectedUserId}\n          selectedUserId={setSelectedUserId}\n          todos={todos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              onRemoveUser={removeUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}